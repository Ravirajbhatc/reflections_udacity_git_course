+ When would you want to use a remote repository rather than keeping all your work local?

When you work with other people, it's useful to access the repository on the Internet, so you can access it anytime and anywhere without having to meet your collaborators.
Also, when you work on different computers or different locations, could be useful to have your repository online, so  you can access your projects from anywhere. It could be also usefull to have your repositories online so you have a working copy alway son the Internet to access it and show to someone in any place.
A remote repository can be also good to keep a backup somewhere.
Using a local repository allows you to work on features/bugs that are not currently resolved, without pushing them to public. This allows you to keep your working progress local until you are finished and whant to share it publicly.

+ Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

It's useful to pull changes only when you really want to work o see the last changes on the repository. You may be working on an old version of a repository because you are fixin a bug introduced time ago. In that case you don't care about the newer versions of the repository.
Also, if you are working on a branch that does not care about master or other branches, you may not need that branches. In that case is not necessary to keep all the repository up to date. You will ask for that branches when you need it.
I supose that pulling changes in the branch that you are currently working on can break your current code having to merge it. If you don't need that changes at that moment, it's better to ask for them when you need them.

+ Describe the differences between forks, clones, and branches. When would you use one instead of another?

Fork is a clone of a repository from a Github repository to another Github repository. Its how Github calls a clone within Github servers. This is useful when you want to clone a repository from Github to your Github account really quick.

Clones are a copy of a particular repository to another repository. For example, copying a remote repository to you local machine is a clone or a local repository to another local repository it's also a clone. This is useful to copy a remote (or local) repository to your local machine for example.

Branches are separate workflows in a same repository. It's really useful to separate different work in progress in differents parts of your repositories. It allows you to mantina a main MASTER branch where you commit only code that works, and have other branches that contains work in progress.

+ What is the benefit of having a copy of the last known state of the remote stored locally?

This allows knowing where is the last updated point of the remote repository in your local copy. With that state you are able to merge your local copy with the remote changes.
This can be useful to know how many commits has been done locally since last respository sync. This can be useful to check if the state of the remote stored locally points to the same commit as in the remote respository so you could know if a merge should be necessary. In that case, you could prefer doing a "git fetch" rather than a "git pull" that will merge all remote changes to you local repository and current branch. Fetch allows you to download remote repository and diff new remote changes to your current local changes.

+ How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

I would collaborate with other version control systems. It's necessary to use systems like git or Github to control your versions and share your work with others.
If I would'nt have a VCS, I think I could try to put my projects on Dropbox or Google Drive. This will not be a good idea because it will be very difficult to control versions and will be impossible to merge changes that different people makes. If someone makes changes, these will ovewrite previous changes without taking them in account.
Another possibility could be sharing code through email or other places and merge your local files from the ones you recived from email or other platforms. That will be very slow and this does not allow you to easily going back to branches or versions. You could mantain all versions in ZIP files or Folders, but will be really difficult to mantain all this manually.

In conclusion, git and Github allows you to works easily and effectively by controlling the versions of your projects and collaborate with others.

+ When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

When you work from on new features, fixing complex bugs or testing things for example, it's a good pattern to start all this work in a separate branch that does not affect your master branch. Then, when you finish working on your branch and you are sure that this can be added to master branch, you can merge your changes to master branch. Working like this, allows you to have a always working version of your project in master branch. This pattern it's also really good for collaborative projects, where lots of people create their branches and safetely merges them to master when they have finished. This prevents breaking your project by commiting often to your master and allows also checking more clear what changes has been done by traversing each branches and identifying each branch with related logical changes.

Directly marking changes on master branch can be good sometimes when you are sure you want to make a change that wont break your project. This could be appropiate by single person projects, but not for collaborative projectes. Event in single projects, I think it's recommended to keep your changes organized by branches to sepparate big changes in multiples commits.
